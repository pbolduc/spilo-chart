replicaCount: 3

image:
  # Image was built from
  # https://github.com/zalando/spilo
  repository: ghcr.io/zalando/spilo-15
  # defaults to the chart appVersion
  tag: ~
  pullPolicy: IfNotPresent

# Credentials used by Patroni
# https://github.com/zalando/patroni/blob/master/docs/SETTINGS.rst#postgresql
# https://github.com/zalando/spilo/blob/master/ENVIRONMENT.rst
credentials:
  useExistingSecret: false
  existingSecret:
    # Name of the existing secret containing the credentials
    name: ~
    # Key of the existing secret containing the superuser (postgres) password
    superuserKey: ~
    # Key of the existing secret containing the admin password
    adminKey: ~
    # Key of the existing secret containing the standby user password
    standbyKey: ~

  random: true
  # The values below allow you to specify passwords for the superuser (postgres), admin, and standby users.
  superuser: tea
  admin: cola
  standby: pinacolada

# Extra custom environment variables.
# See https://github.com/zalando/spilo/blob/master/ENVIRONMENT.rst
env: {}

continuousArchive:
  # Specifies whether continuous archiving with wal-g should be enabled
  enabled: true
  keep: true
  # Cron schedule for doing base backups
  scheduleCronJob: 00 01 * * *
  # Amount of base backups to retain
  retainBackups: 15

  # The storage solution used by wal-g: pvc (default), s3, or gcs are supported by this helm chart
  # https://github.com/wal-g/wal-g/blob/master/docs/STORAGES.md
  storage: pvc
  pvc:
    storageClass: "netapp-file-backup"
    size: 500Mi

  # If choose s3 as the storage type, the secret has to be created first. 
  # It contains three key/value pairs:
  #   AWS_ACCESS_KEY_ID
  #   AWS_SECRET_ACCESS_KEY
  #   AWS_ENDPOINT
  s3:
    bucket: ~
    secretName: ~

  gcs:
    bucket: ~
    # The GCS  bucket folder where the logs will be updated
    backupLocation: wal
    # Name of the secret that holds the credentials to the bucket
    credentialSecretName: ~

persistentVolume:
  enabled: true
  size: 250Mi
  storageClass: "netapp-block-standard"
  subPath: ""
  mountPath: "/home/postgres/pgdata"
  annotations: {}
  accessModes:
    - ReadWriteOnce

resources:
  {}
  # If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

rbac:
  create: true

serviceAccount:
  create: false
  name: ~

networkPolicy:
  enabled: true

podDisruptionBudget:
  enabled: true
  minAvailable: ~
  maxUnavailable: 1

postgresMajorVersion: 15

probes:
  liveness:
    enabled: true
    initialDelaySeconds: 3
    periodSeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 3
  readiness:
    enabled: true
    initialDelaySeconds: 60
    periodSeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 10

terminationGracePeriodSeconds: 30


## Pod Security Context
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
## @param provisioning.podSecurityContext.enabled Enable pod Security Context
## @param provisioning.podSecurityContext.fsGroup Group ID for the container
##
podSecurityContext:
  enabled: true

## Container Security Context
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
## @param provisioning.containerSecurityContext.enabled Enable container Security Context
## @param provisioning.containerSecurityContext.runAsUser User ID for the container
## @param provisioning.containerSecurityContext.runAsNonRoot Avoid running as root User
##
containerSecurityContext:
  enabled: true
  runAsNonRoot: true
  seccompProfile:
    type: RuntimeDefault
  allowPrivilegeEscalation: false
  capabilities:
    drop: 
    - "ALL"

metrics:
  enabled: false
